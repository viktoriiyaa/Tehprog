
#include <iostream>
#include <cmath>
#include <vector>
#include <algorithm> 

const double PI = 3.14159265358979323846;

// Абстрактная точка
class Point {
protected:
    double x, y;
public:
    Point(double x_ = 0, double y_ = 0) : x(x_), y(y_) {}

    virtual ~Point() = default;

    virtual void draw() const = 0;

    void moveCoordinates(double dx, double dy) {
        x += dx;
        y += dy;
    }

    void rotateCoordinates(double angleDeg, const Point& center) {
        double angleRad = angleDeg * PI / 180.0;
        double s = std::sin(angleRad);
        double c = std::cos(angleRad);
        double currentX = x - center.getX();
        double currentY = y - center.getY();
        double newX = currentX * c - currentY * s;
        double newY = currentX * s + currentY * c;
        x = newX + center.getX();
        y = newY + center.getY();
    }

    double getX() const { return x; }

    double getY() const { return y; }

    void print() const { std::cout << "(" << x << ", " << y << ")"; }
};

// Точка
class SimplePoint : public Point 
{
public:
    SimplePoint(double x_ = 0, double y_ = 0) : Point(x_, y_) {}

    void draw() const override 
    {
        std::cout << "Point";
        print();
    }
};

// Абстрактный класс для всех фигур
class Shape {
public:
    // Добавляем публичные точки для вращения и других операций
    SimplePoint t1, t2, t3, t4;

    Shape() : t1(0,0), t2(0,0), t3(0,0), t4(0,0) {}
    virtual ~Shape() = default;

    virtual void draw() const = 0;

    virtual void erase() const = 0;

    virtual void move(double dx, double dy) = 0;

    // Теперь rotate принимает не только центр, но и может использовать точки t1..t4
    virtual void rotate(double angleDeg, const SimplePoint& center) = 0;
};

// Линия
class Line : public Shape 
{
private:
    SimplePoint p1;
    SimplePoint p2;
public:
    Line(const SimplePoint& start, const SimplePoint& end) : p1(start), p2(end) 
    {
        t1 = p1; t2 = p2; // Инициализируем точки вращения
    }

    void draw() const override {
        std::cout << "Рисуем линию из ";
        p1.draw(); std::cout << " to "; p2.draw(); std::cout << std::endl;
    }

    void erase() const override {
        std::cout << "Удаляем линию из ";
        p1.print(); std::cout << " to "; p2.print(); std::cout << std::endl;
    }

    void move(double dx, double dy) override {
        p1.moveCoordinates(dx, dy);
        p2.moveCoordinates(dx, dy);
        t1.moveCoordinates(dx, dy);
        t2.moveCoordinates(dx, dy);
    }

    void rotate(double angleDeg, const SimplePoint& center) override {
        p1.rotateCoordinates(angleDeg, center);
        p2.rotateCoordinates(angleDeg, center);
        t1.rotateCoordinates(angleDeg, center);
        t2.rotateCoordinates(angleDeg, center);
    }
};

// Параллелограмм
class Parallelogram : virtual public Shape {
protected:
    std::vector<SimplePoint> vertices;

    virtual void drawVertices() const {
        for (const auto& v : vertices) {
            v.print();
            std::cout << " ";
        }
    }

public:
    Parallelogram(const SimplePoint& v1, const SimplePoint& v2, const SimplePoint& v3, const SimplePoint& v4) 
    {
        vertices.reserve(4);
        vertices.push_back(v1);
        vertices.push_back(v2);
        vertices.push_back(v3);
        vertices.push_back(v4);

        // Инициализируем точки вращения в базовом классе Shape
        t1 = v1; t2 = v2; t3 = v3; t4 = v4;
    }

    Parallelogram() = default;

    void move(double dx, double dy) override {
        std::for_each(vertices.begin(), vertices.end(), [&](SimplePoint& v) {
            v.moveCoordinates(dx, dy);
        });
        t1.moveCoordinates(dx, dy);
        t2.moveCoordinates(dx, dy);
        t3.moveCoordinates(dx, dy);
        t4.moveCoordinates(dx, dy);
    }

    void rotate(double angleDeg, const SimplePoint& center) override {
        std::for_each(vertices.begin(), vertices.end(), [&](SimplePoint& v) {
            v.rotateCoordinates(angleDeg, center);
        });
        t1.rotateCoordinates(angleDeg, center);
        t2.rotateCoordinates(angleDeg, center);
        t3.rotateCoordinates(angleDeg, center);
        t4.rotateCoordinates(angleDeg, center);
    }

    void draw() const override {
        std::cout << "Рисуем параллелограмм: ";
        drawVertices();
        std::cout << std::endl;
    }

    void erase() const override {
        std::cout << "Удаляем параллелограмм: ";
        drawVertices();
        std::cout << std::endl;
    }
};

// Прямоугольник
class Rectangle : virtual public Parallelogram {
public:
    Rectangle(const SimplePoint& v1, const SimplePoint& v2, const SimplePoint& v3, const SimplePoint& v4)
        : Parallelogram(v1, v2, v3, v4)
    {
    }
    Rectangle() : Parallelogram() {}

    void draw() const override {
        std::cout << "Рисуем прямоугольник: ";
        drawVertices();
        std::cout << std::endl;
    }
    void erase() const override {
        std::cout << "Удаляем прямоугольник: ";
        drawVertices();
        std::cout << std::endl;
    }
};

// Ромб
class Rhombus : virtual public Parallelogram {
public:
    Rhombus(const SimplePoint& v1, const SimplePoint& v2, const SimplePoint& v3, const SimplePoint& v4)
        : Parallelogram(v1, v2, v3, v4)
    {
    }
    Rhombus() : Parallelogram() {}

    void draw() const override {
        std::cout << "Рисуем ромб: ";
        drawVertices();
        std::cout << std::endl;
    }
    void erase() const override {
        std::cout << "Удаляем ромб: ";
        drawVertices();
        std::cout << std::endl;
    }
};

// Квадрат
class Square : public Rectangle, public Rhombus {
public:
    Square(const SimplePoint& v1, const SimplePoint& v2, const SimplePoint& v3, const SimplePoint& v4)
        : Parallelogram(v1, v2, v3, v4), Rectangle(), Rhombus()
    {
        // Инициализируем точки вращения в базовом классе Shape
        t1 = v1; t2 = v2; t3 = v3; t4 = v4;
    }
    void draw() const override {
        std::cout << "Рисуем квадрат: ";
        drawVertices();
        std::cout << std::endl;
    }
    void erase() const override {
        std::cout << "Удаляем квадрат: ";
        drawVertices();
        std::cout << std::endl;
    }
};


int main() 
{
    setlocale(LC_ALL, "Russian");

    SimplePoint origin(0, 0);
    SimplePoint rA(1, 1), rB(5, 1), rC(5, 3), rD(1, 3);
    SimplePoint sA(6, 4), sB(8, 4), sC(8, 6), sD(6, 6);
    SimplePoint lA(0, 0), lB(2, 2);
    SimplePoint pA(-4, 1), pB(-1, 1), pC(0, 3), pD(-3, 3);
    SimplePoint rhA(3, -2), rhB(5, -4), rhC(3, -6), rhD(1, -4);

    std::cout << "---Демонстрация---" << std::endl;

    std::vector<Shape*> shapes;
    shapes.push_back(new Line(lA, lB));
    shapes.push_back(new Rectangle(rA, rB, rC, rD));
    shapes.push_back(new Square(sA, sB, sC, sD));
    shapes.push_back(new Parallelogram(pA, pB, pC, pD));
    shapes.push_back(new Rhombus(rhA, rhB, rhC, rhD));

    for (Shape* shape_ptr : shapes) 
    {
        if (shape_ptr) 
        {
            shape_ptr->draw();

            // Пример вращения вокруг точки t1 (одной из вершин)
            std::cout << "Вращаем вокруг точки t1: ";
            shape_ptr->rotate(45, shape_ptr->t1);
            shape_ptr->draw();

            // Сдвигаем фигуру
            shape_ptr->move(1, 1);
            std::cout << "После сдвига 1 1: ";
            shape_ptr->draw();

            // Вращаем вокруг центра (0,0)
            std::cout << "Вращаем вокруг начала координат: ";
            shape_ptr->rotate(45, origin);
            shape_ptr->draw();

            shape_ptr->erase();
            std::cout << "------------------------------" << std::endl;
        }
    }

    std::cout << "\n---Освобождение памяти для объектов Shape---" << std::endl;
    for (Shape* shape_ptr : shapes) {
        delete shape_ptr;
    }
    shapes.clear();

    return 0;
}
