#include <iostream>
#include <string>

// Структура для хранения данных об автомобиле
struct Car {
    std::string name;
    int year;
    double cost;
};

// Класс односвязного списка
class LinkedList {
private:
    // Внутренняя структура узла списка
    struct Node {
        Car data;       // Данные об автомобиле
        Node* next;     // Указатель на следующий узел

        // Конструктор для создания узла
        Node(Car& car) : data(car), next(nullptr) {}
    };

    Node* head; // Указатель на начало списка

public:
    // Конструктор
    LinkedList() : head(nullptr) {}

    // Добавление элемента в конец списка
    void append(Car& car) {
        Node* newNode = new Node(car);
        if (head == nullptr) {
            head = newNode;
        } else {
            Node* temp = head;
            while (temp->next != nullptr) {
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }

    // Добавление элемента после заданного индекса
    void insertAfter(int index, Car& car) {
        Node* newNode = new Node(car);
        Node* temp = head;
        int count = 0;

        while (temp != nullptr && count < index) {
            temp = temp->next;
            count++;
        }

        if (temp != nullptr) {
            newNode->next = temp->next;
            temp->next = newNode;
        } else {
            std::cout << "Индекс выходит за пределы списка" << std::endl;
        }
    }

    // Добавление элемента перед заданным индексом
    void insertBefore(int index, Car& car) {
        if (index == 0) {
            Node* newNode = new Node(car);
            newNode->next = head;
            head = newNode;
            return;
        }

        Node* newNode = new Node(car);
        Node* temp = head;
        int count = 0;

        while (temp != nullptr && count < index - 1) {
            temp = temp->next;
            count++;
        }

        if (temp != nullptr) {
            newNode->next = temp->next;
            temp->next = newNode;
        } else {
            std::cout << "Индекс выходит за пределы списка" << std::endl;
        }
    }

    // Удаление элемента по заданному индексу
    void remove(int index) {
        if (head == nullptr) {
            std::cout << "Список пуст" << std::endl;
            return;
        }

        if (index == 0) {
            Node* temp = head;
            head = head->next;
            delete temp;
            return;
        }

        Node* temp = head;
        int count = 0;

        while (temp != nullptr && count <= index - 1) {
            temp = temp->next;
            count++;
        }

        if (temp != nullptr && temp->next != nullptr) {
            Node* nodeToDelete = temp->next;
            temp->next = temp->next->next;
            delete nodeToDelete;
        } else {
            std::cout << "Индекс выходит за пределы списка" << std::endl;
        }
    }

    // Вывод всего списка на экран
    void print() {
        Node* temp = head;
        while (temp != nullptr) {
            std::cout << "Name: " << temp->data.name << ", Year: " << temp->data.year << ", Cost: " << temp->data.cost << std::endl;
            temp = temp->next;
        }
        std::cout << "-----------------------------" << std::endl; // Разделитель для удобства
    }

    // Деструктор для очистки памяти
    ~LinkedList() {
        Node* temp = head;
        while (temp != nullptr) {
            Node* next = temp->next;
            delete temp;
            temp = next;
        }
    }
};

int main() {
    LinkedList list;

    // Создание объектов автомобилей
    Car car1 = {"Toyota", 2020, 15000.0};
    Car car2 = {"Honda", 2018, 12000.0};
    Car car3 = {"Ford", 2019, 14000.0};
    Car car4 = {"Chevrolet", 2021, 16000.0};
    Car car5 = {"Nissan", 2017, 11000.0};

    
    // Добавление элементов в список
    std::cout << "1. Добавляем Toyota (append):" << std::endl;
    list.append(car1);

    std::cout << "2. Добавляем Honda (append):" << std::endl;
    list.append(car2);
    list.print();

    std::cout << "3. Вставляем Ford после индекса 0 (insertAfter):" << std::endl;
    list.insertAfter(0, car3);
    list.print();

    std::cout << "4. Вставляем Nissan перед индексом 1 (insertBefore):" << std::endl;
    list.insertBefore(1, car4);
    list.print();

    std::cout << "5. Удаляем элемент с индексом 2 (remove):" << std::endl;
    list.remove(2);

    // Вывод списка в конце
    std::cout << "Финальный список:" << std::endl;
    list.print();

    return 0;
}
